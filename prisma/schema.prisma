generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DB_CONN_URL")
}

model contribution {
    id                   Int            @id @default(autoincrement())
    guid                 String?        @unique @db.VarChar(32)
    purpose              String?        @db.VarChar(16)
    treeCount            Decimal?       @map("tree_count") @db.Decimal(14, 2)
    bouquetDonationId    Int?           @map("bouquet_donation_id")
    quantity             Float?
    deletedAt            DateTime?      @map("deleted_at") @db.DateTime(0)
    contributionType     String         @map("contribution_type") @db.VarChar(20)
    isVerified           Int?           @map("is_verified")
    paymentStatus        String?        @map("payment_status") @db.VarChar(20)
    plantProjectId       Int?           @map("plant_project_id")
    plantProject         project?       @relation(fields: [plantProjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    profile              profile?       @relation(fields: [profile_id], references: [id])
    bouquet              contribution?  @relation("bouquet", fields: [bouquetDonationId], references: [id])
    bouquetContributions contribution[] @relation("bouquet")
    plantDate            DateTime       @map("plant_date") @db.DateTime(0)
    profile_id           Int?
    gift                 gift[]
    giftTo               Json?          @map("gift_data")
    giftMethod           String?        @map("gift_method") @db.VarChar(20)
    tenant               tenant?        @relation(fields: [tenantId], references: [id]) // Add a one-to-one relation to the tenant model
    tenantId             Int?           @map("tenant_id")
    created              DateTime       @unique @db.DateTime(0)
}

model tenant {
    id           Int            @id @default(autoincrement())
    guid         String         @unique(map: "UNIQ_4E59C4622B6FCFB2") @db.VarChar(32)
    name         String         @db.VarChar(255)
    contribution contribution[]
}

model project {
    id             Int            @id @default(autoincrement())
    guid           String         @db.VarChar(32)
    name           String?        @db.VarChar(255)
    allowDonations Boolean        @map("accept_donations")
    description    String?        @db.LongText
    country        String?        @map("country") @db.VarChar(2)
    unit           String?        @map("unit_type") @db.VarChar(255)
    image          String?        @db.VarChar(255)
    purpose        String         @db.VarChar(64)
    location       String?        @db.LongText
    geoLongitude   Float?         @map("geo_longitude")
    geoLatitude    Float?         @map("geo_latitude")
    contribution   contribution[]
    tpoId          Int?           @map("tpo_id")
    bouquetPurpose String?        @map("bouquet_purpose") @db.VarChar(16)
    tpo            profile?       @relation(fields: [tpoId], references: [id])
}

model profile {
    id           Int            @id @default(autoincrement())
    guid         String         @db.VarChar(32)
    name         String?        @db.VarChar(255)
    contribution contribution[]
    plantProject project[]
    gift         gift[]
}

model gift {
    id             Int           @id @default(autoincrement())
    donationId     Int?          @map("donation_id")
    recipientId    Int?          @map("recipient_id")
    guid           String        @unique(map: "UNIQ_A47C990D2B6FCFB2") @db.VarChar(32)
    metadata       Json?
    contribution   contribution? @relation(fields: [donationId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FK_A47C990D4DC1279C")
    recipient      profile?      @relation(fields: [recipientId], references: [id]) // Relation field to profile
    created        DateTime      @db.DateTime(0)
    value          Int?
    purpose        String        @db.VarChar(32)
    type           String        @db.VarChar(50)
    plantDate      DateTime?     @map("payment_date") @db.DateTime(0)
    redemptionDate DateTime?     @map("redemption_date") @db.DateTime(0)
}
